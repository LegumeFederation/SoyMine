buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
        }
    }
    dependencies {
        classpath group: 'org.intermine', name: 'plugin', version: System.getProperty("imVersion")
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}

ext {
  mineRelease = project.hasProperty('release') ? "." + release : ''
  mineName = "soymine"
  minePropertyFileName = "${mineName}.properties$mineRelease"
  minePropertyFile = "${System.env.HOME}/.intermine/$minePropertyFileName"
  println "Using properties file: '$minePropertyFile'"
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  
  repositories {
    mavenLocal()
    jcenter()
    maven {
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
    }
    maven { url 'https://clojars.org/repo' }
    maven {
        url 'http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo/'
    }
  }

  dependencies {
    implementation group: "org.intermine", name: "intermine-resources", version: System.getProperty("imVersion")
    implementation('ant:ant:1.6.5')
    testImplementation group: 'junit', name: 'junit', version: '4.8.2'
    compile fileTree(dir: 'libs', include: '*.jar')
    implementation group: "org.biojava", name: "biojava-core", version: "4.2.0"
    implementation group: "org.biojava", name: "biojava-genome", version: "4.2.0"
    implementation group: "org.biojava", name: "biojava-ontology", version: "4.2.0"
  }


  task copyMineProperties(type: Copy) {
    description "Copies mine specific intermine.properties file (from .intermine directory) into resources output to be included in the war"
    dependsOn 'processResources'
    from (minePropertyFile)
    into sourceSets.main.output.resourcesDir
    rename { fileName -> fileName.replace("$minePropertyFileName", "intermine.properties") }
    //inputs.sourceFiles.stopExecutionIfEmpty()
  }
}

task clean(type: Delete) {
    println "cleaning"
    delete "idresolver.cache"
    println "deleting idresolver cache"
    delete "datasources.xml"
    println "deleting datasources.xml"
    delete "organisms.xml"
    println "deleting organisms.xml"
    delete "publications.xml"
    println "deleting publications.xml"
    delete fileTree('.') {
        include '*.log'
    }
    println "deleted log files"
}
